//extraction of digits

void mth1(int n){
   while(n>0){
       int last_digit;
       last_digit=n%10;
       n=n/10;
       cout<<last_digit<<" ";
   }
}

int main(){
    int n;
    cin>>n;
    mth1(n);
    return 0;
}

output:-
1234
4 3 2 1

//counting the number of digits

void mth1(int n){
    int count=0;
   while(n>0){
       n=n/10;
       count++;
   }
   cout<<count;
}
TC of this code is O(log10(n)), because log10(n) counts the number of times loop runs;
whenever there is division then our TC is usually O(logx(y)) x being the divisor and y being dividend;

or,

//if ever using log gives you errors on coding platforms then use........#include<bits/stdc++.h> in first line;

void mth1(int n){
   int count= (int)(log10(n)+1);
   cout<<count;
}

output:-
21569
5

//reverse number

int reverse(int n){
    int rev=0;
    while(n>0){
        int ld=n%10;
        rev=(rev*10)+ld;
        n=n/10;
    }
    return rev;
}

//palindrome
void palindrome(int n){
    int dup = n;
    int rev = 0;
    while(n>0) {
        int ld=n%10;
        rev=(rev*10)+ld;
        n = n/10;
    }
    if(rev==dup) cout<<"true";
    else cout<<"false";
}
or,



//armstrong numbers

void armstrong(int n){
    int dup=n;
    int arm=0;
    while(n>0){
        int ld=(n%10);
        int arm=ld*ld*ld+arm;
        n=n/10;
    }
    if(arm==dup) cout<<"true";
    else cout<<"false";   
}

